"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebVitalsManager = void 0;
const web_vitals_1 = require("web-vitals");
const client_core_1 = require("@statsig/client-core");
const AutoCaptureEvent_1 = require("./AutoCaptureEvent");
const commonUtils_1 = require("./utils/commonUtils");
const VALID_METRIC_NAMES = ['CLS', 'FCP', 'INP', 'LCP', 'TTFB'];
class WebVitalsManager {
    constructor(_enqueueFn, _errorBoundary) {
        this._enqueueFn = _enqueueFn;
        this._errorBoundary = _errorBoundary;
        this._isInitialized = false;
        this._metricEvent = {
            url: (0, commonUtils_1._getSafeUrlString)(),
            sanitizedUrl: (0, commonUtils_1._getSanitizedPageUrl)(),
            metrics: [],
            firstMetricTimestamp: undefined,
        };
    }
    startTracking() {
        var _a, _b;
        try {
            if (this._isInitialized) {
                return;
            }
            const protocol = (_b = (_a = (0, client_core_1._getWindowSafe)()) === null || _a === void 0 ? void 0 : _a.location) === null || _b === void 0 ? void 0 : _b.protocol;
            if (protocol !== 'https:' && protocol !== 'http:') {
                return;
            }
            (0, web_vitals_1.onCLS)((metric) => this._handleMetric(metric));
            (0, web_vitals_1.onFCP)((metric) => this._handleMetric(metric));
            (0, web_vitals_1.onINP)((metric) => this._handleMetric(metric));
            (0, web_vitals_1.onLCP)((metric) => this._handleMetric(metric));
            (0, web_vitals_1.onTTFB)((metric) => this._handleMetric(metric));
            this._isInitialized = true;
        }
        catch (error) {
            client_core_1.Log.error('Error starting web vitals tracking', error);
            this._errorBoundary.logError('autoCapture:WebVitalsManager', error);
        }
    }
    _handleMetric(metric) {
        if (this._metricEvent.firstMetricTimestamp === undefined) {
            this._metricEvent.firstMetricTimestamp = Date.now();
        }
        if (metric === undefined ||
            (metric === null || metric === void 0 ? void 0 : metric.name) === undefined) {
            return;
        }
        const currentUrl = (0, commonUtils_1._getSafeUrlString)();
        if (currentUrl === '') {
            // If the URL is not valid, we don't want to track the metric
            return;
        }
        if (!VALID_METRIC_NAMES.includes(metric.name)) {
            return;
        }
        if (currentUrl !== this._metricEvent.url) {
            this._enqueueWebVitalsAutoCaptureEvent();
            this._metricEvent.url = currentUrl;
        }
        const metricData = metric;
        this._metricEvent.metrics.push({
            name: metricData.name,
            value: metricData.value,
            delta: metricData.delta,
            id: metricData.id,
        });
        if (this._metricEvent.metrics.length === VALID_METRIC_NAMES.length) {
            this._enqueueWebVitalsAutoCaptureEvent();
        }
    }
    _enqueueWebVitalsAutoCaptureEvent() {
        if (this._metricEvent.url === '' ||
            this._metricEvent.metrics.length === 0) {
            return;
        }
        const flattenedMetrics = {};
        this._metricEvent.metrics.forEach((metric) => {
            const prefix = metric.name.toLowerCase();
            flattenedMetrics[`${prefix}_value`] = metric.value;
            flattenedMetrics[`${prefix}_delta`] = metric.delta;
            flattenedMetrics[`${prefix}_id`] = metric.id;
        });
        this._enqueueFn(AutoCaptureEvent_1.AutoCaptureEventName.WEB_VITALS, this._metricEvent.sanitizedUrl, Object.assign(Object.assign({}, flattenedMetrics), { first_metric_timestamp: this._metricEvent.firstMetricTimestamp }));
        this._metricEvent = {
            url: (0, commonUtils_1._getSafeUrlString)(),
            sanitizedUrl: (0, commonUtils_1._getSanitizedPageUrl)(),
            metrics: [],
            firstMetricTimestamp: undefined,
        };
    }
}
exports.WebVitalsManager = WebVitalsManager;
