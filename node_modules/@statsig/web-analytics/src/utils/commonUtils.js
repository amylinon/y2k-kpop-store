"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapFunctionWithRestore = exports.throttle = exports._sanitizeString = exports._getAnchorNodeInHierarchy = exports._getSafeTimezoneOffset = exports._getSafeTimezone = exports._getSafeNetworkInformation = exports._registerEventHandler = exports._getSanitizedPageUrl = exports._getSafeUrlString = exports._getSafeUrl = exports._shouldLogEvent = exports._getTargetNode = exports._stripEmptyValues = exports.interactiveElements = void 0;
const client_core_1 = require("@statsig/client-core");
const coreCCPattern = `(4[0-9]{12}(?:[0-9]{3})?)|(5[1-5][0-9]{14})|(6(?:011|5[0-9]{2})[0-9]{12})|(3[47][0-9]{13})|(3(?:0[0-5]|[68][0-9])[0-9]{11})|((?:2131|1800|35[0-9]{3})[0-9]{11})`;
const CC_REGEX = new RegExp(`^(?:${coreCCPattern})$`);
const coreSSNPattern = `\\d{3}-?\\d{2}-?\\d{4}`;
const SSN_REGEX = new RegExp(`^(${coreSSNPattern})$`);
exports.interactiveElements = [
    'button',
    'a',
    'input',
    'select',
    'textarea',
    'form',
    'select',
    'label',
];
function _stripEmptyValues(obj) {
    return Object.fromEntries(Object.entries(obj).filter(([_, value]) => value != null && value !== '' && value !== undefined));
}
exports._stripEmptyValues = _stripEmptyValues;
function _getTargetNode(e) {
    if (!e) {
        return null;
    }
    let target = e.target || e.srcElement;
    if (!target || !(target instanceof Element)) {
        return null;
    }
    if (target.nodeType === 3) {
        target = (target.parentNode || null);
    }
    return target;
}
exports._getTargetNode = _getTargetNode;
function _shouldLogEvent(e, el, isCopyEvent = false) {
    if (!e || !el || el.nodeType !== 1) {
        return false;
    }
    const tagName = el.tagName.toLowerCase();
    const eventType = e.type.toLowerCase();
    const classList = el.classList;
    if (classList.contains('statsig-no-capture')) {
        return false;
    }
    if (isCopyEvent) {
        // We don't want to force strict event filtering for copy events
        return true;
    }
    switch (tagName) {
        case 'html':
            return false;
        case 'form':
            return ['submit'].indexOf(eventType) >= 0;
        case 'input':
        case 'select':
        case 'textarea':
            return ['change', 'click'].indexOf(eventType) >= 0;
        default:
            if (eventType === 'click') {
                const compStyles = window.getComputedStyle(el);
                if (compStyles && compStyles.getPropertyValue('cursor') === 'pointer') {
                    return true;
                }
                if (exports.interactiveElements.includes(tagName)) {
                    return true;
                }
                if (el.getAttribute('contenteditable') === 'true') {
                    return true;
                }
                const anchor = _getAnchorNodeInHierarchy(el);
                if (anchor) {
                    return true;
                }
            }
            return false;
    }
}
exports._shouldLogEvent = _shouldLogEvent;
function _getSafeUrl() {
    var _a, _b, _c;
    const href = (_c = (_b = (_a = (0, client_core_1._getWindowSafe)()) === null || _a === void 0 ? void 0 : _a.location) === null || _b === void 0 ? void 0 : _b.href) !== null && _c !== void 0 ? _c : '';
    let url;
    try {
        url = new URL(href);
    }
    catch (e) {
        url = new URL('error:');
    }
    return url;
}
exports._getSafeUrl = _getSafeUrl;
function _getSafeUrlString() {
    const urlString = _getSafeUrl().toString();
    if (urlString.startsWith('error:')) {
        return '';
    }
    return urlString;
}
exports._getSafeUrlString = _getSafeUrlString;
function _getSanitizedPageUrl() {
    return (0, client_core_1._getCurrentPageUrlSafe)() || '';
}
exports._getSanitizedPageUrl = _getSanitizedPageUrl;
function _registerEventHandler(element, eventType, handler) {
    if (!element || !element.addEventListener) {
        return;
    }
    element.addEventListener(eventType, handler, true);
}
exports._registerEventHandler = _registerEventHandler;
function _getSafeNetworkInformation() {
    const win = (0, client_core_1._getWindowSafe)();
    if (!win || !win.navigator) {
        return null;
    }
    const connection = win.navigator.connection;
    if (!connection) {
        return null;
    }
    return connection;
}
exports._getSafeNetworkInformation = _getSafeNetworkInformation;
function _getSafeTimezone() {
    try {
        return Intl.DateTimeFormat().resolvedOptions().timeZone;
    }
    catch (e) {
        return null;
    }
}
exports._getSafeTimezone = _getSafeTimezone;
function _getSafeTimezoneOffset() {
    try {
        return new Date().getTimezoneOffset();
    }
    catch (e) {
        return null;
    }
}
exports._getSafeTimezoneOffset = _getSafeTimezoneOffset;
function _getAnchorNodeInHierarchy(node) {
    if (!node) {
        return null;
    }
    let parent = node;
    while (parent) {
        const parentTagName = parent.tagName.toLowerCase();
        if (['body', 'document'].includes(parentTagName)) {
            return null;
        }
        if (parent.tagName.toLowerCase() === 'a') {
            return parent;
        }
        parent = parent.parentElement;
    }
    return null;
}
exports._getAnchorNodeInHierarchy = _getAnchorNodeInHierarchy;
function _sanitizeString(maybeString) {
    if (!maybeString) {
        return null;
    }
    return maybeString
        .replace(/<[^>]*>/g, '')
        .trim()
        .split(/(\s+)/)
        .filter((s) => _shouldCaptureTextValue(s))
        .join('')
        .replace(/[\r\n]/g, ' ')
        .replace(/[ ]+/g, ' ')
        .substring(0, 255);
}
exports._sanitizeString = _sanitizeString;
function _shouldCaptureTextValue(text) {
    if (CC_REGEX.test((text || '').replace(/[- ]/g, ''))) {
        return false;
    }
    if (SSN_REGEX.test((text || '').replace(/[- ]/g, ''))) {
        return false;
    }
    return true;
}
function throttle(fn, limit) {
    let lastCall = 0;
    return function (...args) {
        const now = Date.now();
        if (now - lastCall >= limit) {
            lastCall = now;
            fn(...args);
        }
    };
}
exports.throttle = throttle;
function wrapFunctionWithRestore(targetObject, functionName, wrapperFactory) {
    const originalFunction = targetObject[functionName];
    if (typeof originalFunction !== 'function') {
        return () => {
            // noop
        };
    }
    try {
        const wrappedFunction = wrapperFactory(originalFunction);
        Object.defineProperty(wrappedFunction, '__statsig_original__', {
            enumerable: false,
            value: originalFunction,
        });
        targetObject[functionName] = wrappedFunction;
        // Restore function
        return () => {
            targetObject[functionName] = originalFunction;
        };
    }
    catch (_a) {
        return () => {
            // noop
        };
    }
}
exports.wrapFunctionWithRestore = wrapFunctionWithRestore;
