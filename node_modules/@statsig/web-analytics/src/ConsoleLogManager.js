"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsoleLogManager = void 0;
/* eslint-disable no-console */
const client_core_1 = require("@statsig/client-core");
const AutoCaptureEvent_1 = require("./AutoCaptureEvent");
const commonUtils_1 = require("./utils/commonUtils");
const consoleLogsUtils_1 = require("./utils/consoleLogsUtils");
const metadataUtils_1 = require("./utils/metadataUtils");
const ConsoleLogPriority = {
    trace: 10,
    debug: 20,
    log: 30, // log & info are the same priority
    info: 30,
    warn: 40,
    error: 50,
};
const DEFAULT_MAX_KEYS = 10;
const DEFAULT_MAX_DEPTH = 10;
const DEFAULT_MAX_STRING_LENGTH = 500;
class ConsoleLogManager {
    constructor(_enqueueFn, _errorBoundary, _options) {
        var _a, _b, _c, _d;
        this._enqueueFn = _enqueueFn;
        this._errorBoundary = _errorBoundary;
        this._options = _options;
        this._restoreFns = [];
        this._isTracking = false;
        this._logLevel = 'info';
        this.__source = 'js-auto-capture';
        this._logLevel = (_a = this._options.logLevel) !== null && _a !== void 0 ? _a : 'info';
        this._maxKeys = (_b = this._options.maxKeys) !== null && _b !== void 0 ? _b : DEFAULT_MAX_KEYS;
        this._maxDepth = (_c = this._options.maxDepth) !== null && _c !== void 0 ? _c : DEFAULT_MAX_DEPTH;
        this._maxStringLength =
            (_d = this._options.maxStringLength) !== null && _d !== void 0 ? _d : DEFAULT_MAX_STRING_LENGTH;
    }
    startTracking() {
        try {
            if (this._isTracking || !this._options.enabled)
                return;
            const win = (0, client_core_1._getWindowSafe)();
            if (!win)
                return;
            this._patchConsole();
            this._isTracking = true;
        }
        catch (error) {
            client_core_1.Log.error('Error starting console log tracking', error);
            this._errorBoundary.logError('autoCapture:ConsoleLogManager', error);
        }
    }
    stopTracking() {
        if (!this._isTracking)
            return;
        this._restoreFns.forEach((restore) => restore());
        this._restoreFns = [];
        this._isTracking = false;
    }
    _patchConsole() {
        Object.entries(ConsoleLogPriority).forEach(([level, priority]) => {
            if (priority < ConsoleLogPriority[this._logLevel])
                return;
            if (!console[level])
                return;
            const original = console[level].bind(console);
            let inStack = false;
            const restore = (0, commonUtils_1.wrapFunctionWithRestore)(console, level, (originalFn) => {
                return (...args) => {
                    originalFn(...args);
                    if (inStack)
                        return;
                    inStack = true;
                    try {
                        const payload = args.map((a) => (0, consoleLogsUtils_1._safeStringify)(a, this._maxKeys, this._maxDepth, this._maxStringLength));
                        const trace = (0, consoleLogsUtils_1._getStackTrace)();
                        this._enqueueConsoleLog(level, payload, trace);
                    }
                    catch (err) {
                        original('console observer error:', err, ...args);
                        this._errorBoundary.logError('autoCapture:ConsoleLogManager', err);
                    }
                    finally {
                        inStack = false;
                    }
                };
            });
            this._restoreFns.push(restore);
        });
    }
    _enqueueConsoleLog(level, payload, trace) {
        if (!this._shouldLog())
            return;
        const metadata = Object.assign({ status: level === 'log' ? 'info' : level, log_level: level, payload,
            trace, timestamp: Date.now(), source: this.__source }, (0, metadataUtils_1._gatherAllMetadata)((0, commonUtils_1._getSafeUrl)()));
        this._enqueueFn(AutoCaptureEvent_1.AutoCaptureEventName.CONSOLE_LOG, payload.join(' '), metadata);
    }
    _shouldLog() {
        if (!this._options.sampleRate ||
            typeof this._options.sampleRate !== 'number' ||
            this._options.sampleRate <= 0 ||
            this._options.sampleRate >= 1) {
            return true;
        }
        return Math.random() < this._options.sampleRate;
    }
}
exports.ConsoleLogManager = ConsoleLogManager;
